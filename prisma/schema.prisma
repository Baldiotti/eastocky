generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Category {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  isActive    Boolean       @default(true)
  Transaction Transaction[]
}

model Goals {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String
  goal         Float         @db.Real
  currentValue Float         @default(0) @db.Real
  initialDate  DateTime      @default(now()) @db.Date
  deadline     DateTime      @db.Date
  endDate      DateTime?     @db.Date
  profileId    String        @db.Uuid
  Profile      Profile       @relation(fields: [profileId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Transaction  Transaction[]
}

model Investment {
  id                   String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  stock                String
  walletId             String                  @db.Uuid
  investmentDate       DateTime                @default(now()) @db.Date
  price                Float                   @db.Real
  quantity             Float                   @default(1)
  relationInvestmentId String?                 @db.Uuid
  remainQuantity       Float
  type                 OperationInvestmentType
  category             InvestmentCategory
  Investment           Investment?             @relation("InvestmentToInvestment", fields: [relationInvestmentId], references: [id], onDelete: Restrict)
  relatedInvestments     Investment[]            @relation("InvestmentToInvestment")
  Wallet               Wallet                  @relation(fields: [walletId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Transaction {
  id                                             String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description                                    String?
  date                                           DateTime        @default(now()) @db.Date
  value                                          Float           @default(0) @db.Real
  walletId                                       String          @db.Uuid
  categoryId                                     String?         @db.Uuid
  destinationWalletId                            String?         @db.Uuid
  goalId                                         String?         @db.Uuid
  type                                           TransactionType @default(EXPENSE)
  Category                                       Category?       @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Wallet_Transaction_destinationWalletIdToWallet Wallet?         @relation("Transaction_destinationWalletIdToWallet", fields: [destinationWalletId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Goals                                          Goals?          @relation(fields: [goalId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Wallet_Transaction_walletIdToWallet            Wallet          @relation("Transaction_walletIdToWallet", fields: [walletId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Profile {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  avatar_url String?
  full_name  String
  username   String   @unique
  goals      Goals[]
  wallet     Wallet[]

  @@map("profile")
}

model Wallet {
  id                                                  String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                                                String
  balance                                             Float            @default(0) @db.Real
  region                                              RegionInvestment @default(USA)
  walletType                                          WalletType       @default(REGULAR)
  profileId                                           String           @db.Uuid
  Investment                                          Investment[]
  Transaction_Transaction_destinationWalletIdToWallet Transaction[]    @relation("Transaction_destinationWalletIdToWallet")
  Transaction_Transaction_walletIdToWallet            Transaction[]    @relation("Transaction_walletIdToWallet")
  Profile                                             Profile          @relation(fields: [profileId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum TransactionType {
  EXPENSE
  INCOME
  TRANSFER
  GOAL
}

enum WalletType {
  REGULAR
  INVESTMENT
}

enum RegionInvestment {
  USA
  BRASIL
}

enum OperationInvestmentType {
  BUY
  SELL
}

enum InvestmentCategory {
  ACAO
  FII
  BDR
  CRYPTO
  STOCK
}
